// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ss.proto

/*
	Package ss is a generated protocol buffer package.

	It is generated from these files:
		ss.proto

	It has these top-level messages:
		TablePing
		TableStart
		TableAction
		TableSweepOne
		TableSweepAll
		TableDeleteIfAny
		TableMail
		TableOutputs
*/
package ss

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TablePing struct {
}

func (m *TablePing) Reset()                    { *m = TablePing{} }
func (*TablePing) ProtoMessage()               {}
func (*TablePing) Descriptor() ([]byte, []int) { return fileDescriptorSs, []int{0} }

type TableStart struct {
	Tid  int64   `protobuf:"varint,1,opt,name=Tid,proto3" json:"Tid,omitempty"`
	Gids []int64 `protobuf:"varint,2,rep,packed,name=Gids" json:"Gids,omitempty"`
}

func (m *TableStart) Reset()                    { *m = TableStart{} }
func (*TableStart) ProtoMessage()               {}
func (*TableStart) Descriptor() ([]byte, []int) { return fileDescriptorSs, []int{1} }

func (m *TableStart) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *TableStart) GetGids() []int64 {
	if m != nil {
		return m.Gids
	}
	return nil
}

type TableAction struct {
	Tid     int64  `protobuf:"varint,1,opt,name=Tid,proto3" json:"Tid,omitempty"`
	Who     int64  `protobuf:"varint,2,opt,name=Who,proto3" json:"Who,omitempty"`
	ActStr  string `protobuf:"bytes,3,opt,name=ActStr,proto3" json:"ActStr,omitempty"`
	ActArg  int64  `protobuf:"varint,4,opt,name=ActArg,proto3" json:"ActArg,omitempty"`
	ActTile string `protobuf:"bytes,5,opt,name=ActTile,proto3" json:"ActTile,omitempty"`
}

func (m *TableAction) Reset()                    { *m = TableAction{} }
func (*TableAction) ProtoMessage()               {}
func (*TableAction) Descriptor() ([]byte, []int) { return fileDescriptorSs, []int{2} }

func (m *TableAction) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *TableAction) GetWho() int64 {
	if m != nil {
		return m.Who
	}
	return 0
}

func (m *TableAction) GetActStr() string {
	if m != nil {
		return m.ActStr
	}
	return ""
}

func (m *TableAction) GetActArg() int64 {
	if m != nil {
		return m.ActArg
	}
	return 0
}

func (m *TableAction) GetActTile() string {
	if m != nil {
		return m.ActTile
	}
	return ""
}

type TableSweepOne struct {
	Tid int64 `protobuf:"varint,1,opt,name=Tid,proto3" json:"Tid,omitempty"`
	Who int64 `protobuf:"varint,2,opt,name=Who,proto3" json:"Who,omitempty"`
	All bool  `protobuf:"varint,3,opt,name=All,proto3" json:"All,omitempty"`
}

func (m *TableSweepOne) Reset()                    { *m = TableSweepOne{} }
func (*TableSweepOne) ProtoMessage()               {}
func (*TableSweepOne) Descriptor() ([]byte, []int) { return fileDescriptorSs, []int{3} }

func (m *TableSweepOne) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *TableSweepOne) GetWho() int64 {
	if m != nil {
		return m.Who
	}
	return 0
}

func (m *TableSweepOne) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type TableSweepAll struct {
	Tid int64 `protobuf:"varint,1,opt,name=Tid,proto3" json:"Tid,omitempty"`
}

func (m *TableSweepAll) Reset()                    { *m = TableSweepAll{} }
func (*TableSweepAll) ProtoMessage()               {}
func (*TableSweepAll) Descriptor() ([]byte, []int) { return fileDescriptorSs, []int{4} }

func (m *TableSweepAll) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type TableDeleteIfAny struct {
	Tid int64 `protobuf:"varint,1,opt,name=Tid,proto3" json:"Tid,omitempty"`
}

func (m *TableDeleteIfAny) Reset()                    { *m = TableDeleteIfAny{} }
func (*TableDeleteIfAny) ProtoMessage()               {}
func (*TableDeleteIfAny) Descriptor() ([]byte, []int) { return fileDescriptorSs, []int{5} }

func (m *TableDeleteIfAny) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type TableMail struct {
	Who     int64  `protobuf:"varint,1,opt,name=Who,proto3" json:"Who,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *TableMail) Reset()                    { *m = TableMail{} }
func (*TableMail) ProtoMessage()               {}
func (*TableMail) Descriptor() ([]byte, []int) { return fileDescriptorSs, []int{6} }

func (m *TableMail) GetWho() int64 {
	if m != nil {
		return m.Who
	}
	return 0
}

func (m *TableMail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type TableOutputs struct {
	Tid      int64        `protobuf:"varint,1,opt,name=Tid,proto3" json:"Tid,omitempty"`
	GameOver bool         `protobuf:"varint,2,opt,name=GameOver,proto3" json:"GameOver,omitempty"`
	Mails    []*TableMail `protobuf:"bytes,3,rep,name=Mails" json:"Mails,omitempty"`
	Sweepees []int64      `protobuf:"varint,4,rep,packed,name=Sweepees" json:"Sweepees,omitempty"`
}

func (m *TableOutputs) Reset()                    { *m = TableOutputs{} }
func (*TableOutputs) ProtoMessage()               {}
func (*TableOutputs) Descriptor() ([]byte, []int) { return fileDescriptorSs, []int{7} }

func (m *TableOutputs) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *TableOutputs) GetGameOver() bool {
	if m != nil {
		return m.GameOver
	}
	return false
}

func (m *TableOutputs) GetMails() []*TableMail {
	if m != nil {
		return m.Mails
	}
	return nil
}

func (m *TableOutputs) GetSweepees() []int64 {
	if m != nil {
		return m.Sweepees
	}
	return nil
}

func init() {
	proto.RegisterType((*TablePing)(nil), "ss.TablePing")
	proto.RegisterType((*TableStart)(nil), "ss.TableStart")
	proto.RegisterType((*TableAction)(nil), "ss.TableAction")
	proto.RegisterType((*TableSweepOne)(nil), "ss.TableSweepOne")
	proto.RegisterType((*TableSweepAll)(nil), "ss.TableSweepAll")
	proto.RegisterType((*TableDeleteIfAny)(nil), "ss.TableDeleteIfAny")
	proto.RegisterType((*TableMail)(nil), "ss.TableMail")
	proto.RegisterType((*TableOutputs)(nil), "ss.TableOutputs")
}
func (this *TablePing) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TablePing)
	if !ok {
		that2, ok := that.(TablePing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *TableStart) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TableStart)
	if !ok {
		that2, ok := that.(TableStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Tid != that1.Tid {
		return false
	}
	if len(this.Gids) != len(that1.Gids) {
		return false
	}
	for i := range this.Gids {
		if this.Gids[i] != that1.Gids[i] {
			return false
		}
	}
	return true
}
func (this *TableAction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TableAction)
	if !ok {
		that2, ok := that.(TableAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Tid != that1.Tid {
		return false
	}
	if this.Who != that1.Who {
		return false
	}
	if this.ActStr != that1.ActStr {
		return false
	}
	if this.ActArg != that1.ActArg {
		return false
	}
	if this.ActTile != that1.ActTile {
		return false
	}
	return true
}
func (this *TableSweepOne) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TableSweepOne)
	if !ok {
		that2, ok := that.(TableSweepOne)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Tid != that1.Tid {
		return false
	}
	if this.Who != that1.Who {
		return false
	}
	if this.All != that1.All {
		return false
	}
	return true
}
func (this *TableSweepAll) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TableSweepAll)
	if !ok {
		that2, ok := that.(TableSweepAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Tid != that1.Tid {
		return false
	}
	return true
}
func (this *TableDeleteIfAny) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TableDeleteIfAny)
	if !ok {
		that2, ok := that.(TableDeleteIfAny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Tid != that1.Tid {
		return false
	}
	return true
}
func (this *TableMail) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TableMail)
	if !ok {
		that2, ok := that.(TableMail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Who != that1.Who {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *TableOutputs) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TableOutputs)
	if !ok {
		that2, ok := that.(TableOutputs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Tid != that1.Tid {
		return false
	}
	if this.GameOver != that1.GameOver {
		return false
	}
	if len(this.Mails) != len(that1.Mails) {
		return false
	}
	for i := range this.Mails {
		if !this.Mails[i].Equal(that1.Mails[i]) {
			return false
		}
	}
	if len(this.Sweepees) != len(that1.Sweepees) {
		return false
	}
	for i := range this.Sweepees {
		if this.Sweepees[i] != that1.Sweepees[i] {
			return false
		}
	}
	return true
}
func (this *TablePing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&ss.TablePing{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TableStart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ss.TableStart{")
	s = append(s, "Tid: "+fmt.Sprintf("%#v", this.Tid)+",\n")
	s = append(s, "Gids: "+fmt.Sprintf("%#v", this.Gids)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TableAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ss.TableAction{")
	s = append(s, "Tid: "+fmt.Sprintf("%#v", this.Tid)+",\n")
	s = append(s, "Who: "+fmt.Sprintf("%#v", this.Who)+",\n")
	s = append(s, "ActStr: "+fmt.Sprintf("%#v", this.ActStr)+",\n")
	s = append(s, "ActArg: "+fmt.Sprintf("%#v", this.ActArg)+",\n")
	s = append(s, "ActTile: "+fmt.Sprintf("%#v", this.ActTile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TableSweepOne) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ss.TableSweepOne{")
	s = append(s, "Tid: "+fmt.Sprintf("%#v", this.Tid)+",\n")
	s = append(s, "Who: "+fmt.Sprintf("%#v", this.Who)+",\n")
	s = append(s, "All: "+fmt.Sprintf("%#v", this.All)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TableSweepAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ss.TableSweepAll{")
	s = append(s, "Tid: "+fmt.Sprintf("%#v", this.Tid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TableDeleteIfAny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ss.TableDeleteIfAny{")
	s = append(s, "Tid: "+fmt.Sprintf("%#v", this.Tid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TableMail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ss.TableMail{")
	s = append(s, "Who: "+fmt.Sprintf("%#v", this.Who)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TableOutputs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ss.TableOutputs{")
	s = append(s, "Tid: "+fmt.Sprintf("%#v", this.Tid)+",\n")
	s = append(s, "GameOver: "+fmt.Sprintf("%#v", this.GameOver)+",\n")
	if this.Mails != nil {
		s = append(s, "Mails: "+fmt.Sprintf("%#v", this.Mails)+",\n")
	}
	s = append(s, "Sweepees: "+fmt.Sprintf("%#v", this.Sweepees)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSs(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TablePing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TablePing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TableStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSs(dAtA, i, uint64(m.Tid))
	}
	if len(m.Gids) > 0 {
		dAtA2 := make([]byte, len(m.Gids)*10)
		var j1 int
		for _, num1 := range m.Gids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintSs(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *TableAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSs(dAtA, i, uint64(m.Tid))
	}
	if m.Who != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSs(dAtA, i, uint64(m.Who))
	}
	if len(m.ActStr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSs(dAtA, i, uint64(len(m.ActStr)))
		i += copy(dAtA[i:], m.ActStr)
	}
	if m.ActArg != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSs(dAtA, i, uint64(m.ActArg))
	}
	if len(m.ActTile) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSs(dAtA, i, uint64(len(m.ActTile)))
		i += copy(dAtA[i:], m.ActTile)
	}
	return i, nil
}

func (m *TableSweepOne) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSweepOne) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSs(dAtA, i, uint64(m.Tid))
	}
	if m.Who != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSs(dAtA, i, uint64(m.Who))
	}
	if m.All {
		dAtA[i] = 0x18
		i++
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TableSweepAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSweepAll) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSs(dAtA, i, uint64(m.Tid))
	}
	return i, nil
}

func (m *TableDeleteIfAny) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDeleteIfAny) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSs(dAtA, i, uint64(m.Tid))
	}
	return i, nil
}

func (m *TableMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Who != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSs(dAtA, i, uint64(m.Who))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSs(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *TableOutputs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableOutputs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSs(dAtA, i, uint64(m.Tid))
	}
	if m.GameOver {
		dAtA[i] = 0x10
		i++
		if m.GameOver {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Mails) > 0 {
		for _, msg := range m.Mails {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Sweepees) > 0 {
		dAtA4 := make([]byte, len(m.Sweepees)*10)
		var j3 int
		for _, num1 := range m.Sweepees {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintSs(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func encodeFixed64Ss(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Ss(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSs(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TablePing) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TableStart) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovSs(uint64(m.Tid))
	}
	if len(m.Gids) > 0 {
		l = 0
		for _, e := range m.Gids {
			l += sovSs(uint64(e))
		}
		n += 1 + sovSs(uint64(l)) + l
	}
	return n
}

func (m *TableAction) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovSs(uint64(m.Tid))
	}
	if m.Who != 0 {
		n += 1 + sovSs(uint64(m.Who))
	}
	l = len(m.ActStr)
	if l > 0 {
		n += 1 + l + sovSs(uint64(l))
	}
	if m.ActArg != 0 {
		n += 1 + sovSs(uint64(m.ActArg))
	}
	l = len(m.ActTile)
	if l > 0 {
		n += 1 + l + sovSs(uint64(l))
	}
	return n
}

func (m *TableSweepOne) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovSs(uint64(m.Tid))
	}
	if m.Who != 0 {
		n += 1 + sovSs(uint64(m.Who))
	}
	if m.All {
		n += 2
	}
	return n
}

func (m *TableSweepAll) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovSs(uint64(m.Tid))
	}
	return n
}

func (m *TableDeleteIfAny) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovSs(uint64(m.Tid))
	}
	return n
}

func (m *TableMail) Size() (n int) {
	var l int
	_ = l
	if m.Who != 0 {
		n += 1 + sovSs(uint64(m.Who))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSs(uint64(l))
	}
	return n
}

func (m *TableOutputs) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovSs(uint64(m.Tid))
	}
	if m.GameOver {
		n += 2
	}
	if len(m.Mails) > 0 {
		for _, e := range m.Mails {
			l = e.Size()
			n += 1 + l + sovSs(uint64(l))
		}
	}
	if len(m.Sweepees) > 0 {
		l = 0
		for _, e := range m.Sweepees {
			l += sovSs(uint64(e))
		}
		n += 1 + sovSs(uint64(l)) + l
	}
	return n
}

func sovSs(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSs(x uint64) (n int) {
	return sovSs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TablePing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TablePing{`,
		`}`,
	}, "")
	return s
}
func (this *TableStart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TableStart{`,
		`Tid:` + fmt.Sprintf("%v", this.Tid) + `,`,
		`Gids:` + fmt.Sprintf("%v", this.Gids) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TableAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TableAction{`,
		`Tid:` + fmt.Sprintf("%v", this.Tid) + `,`,
		`Who:` + fmt.Sprintf("%v", this.Who) + `,`,
		`ActStr:` + fmt.Sprintf("%v", this.ActStr) + `,`,
		`ActArg:` + fmt.Sprintf("%v", this.ActArg) + `,`,
		`ActTile:` + fmt.Sprintf("%v", this.ActTile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TableSweepOne) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TableSweepOne{`,
		`Tid:` + fmt.Sprintf("%v", this.Tid) + `,`,
		`Who:` + fmt.Sprintf("%v", this.Who) + `,`,
		`All:` + fmt.Sprintf("%v", this.All) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TableSweepAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TableSweepAll{`,
		`Tid:` + fmt.Sprintf("%v", this.Tid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TableDeleteIfAny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TableDeleteIfAny{`,
		`Tid:` + fmt.Sprintf("%v", this.Tid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TableMail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TableMail{`,
		`Who:` + fmt.Sprintf("%v", this.Who) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TableOutputs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TableOutputs{`,
		`Tid:` + fmt.Sprintf("%v", this.Tid) + `,`,
		`GameOver:` + fmt.Sprintf("%v", this.GameOver) + `,`,
		`Mails:` + strings.Replace(fmt.Sprintf("%v", this.Mails), "TableMail", "TableMail", 1) + `,`,
		`Sweepees:` + fmt.Sprintf("%v", this.Sweepees) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSs(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TablePing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TablePing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TablePing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Gids = append(m.Gids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSs
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Gids = append(m.Gids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Gids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Who", wireType)
			}
			m.Who = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Who |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActArg", wireType)
			}
			m.ActArg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActArg |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActTile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActTile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableSweepOne) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSweepOne: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSweepOne: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Who", wireType)
			}
			m.Who = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Who |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableSweepAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSweepAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSweepAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableDeleteIfAny) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableDeleteIfAny: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableDeleteIfAny: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Who", wireType)
			}
			m.Who = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Who |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableOutputs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableOutputs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableOutputs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameOver", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GameOver = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mails = append(m.Mails, &TableMail{})
			if err := m.Mails[len(m.Mails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sweepees = append(m.Sweepees, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSs
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sweepees = append(m.Sweepees, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sweepees", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSs
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSs
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSs(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSs = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSs   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ss.proto", fileDescriptorSs) }

var fileDescriptorSs = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbd, 0x4e, 0xeb, 0x30,
	0x14, 0xc7, 0xe3, 0xba, 0x1f, 0xe9, 0xe9, 0xad, 0x14, 0x65, 0xb8, 0xb2, 0xee, 0x60, 0xe5, 0x06,
	0x86, 0x0c, 0xa8, 0x43, 0x19, 0x98, 0xc3, 0x87, 0x2a, 0x06, 0x54, 0xe4, 0x56, 0xea, 0x9c, 0xb6,
	0xa6, 0x8d, 0x64, 0x92, 0x2a, 0x76, 0x41, 0x08, 0x21, 0xf1, 0x08, 0x3c, 0x06, 0x8f, 0xc2, 0xd8,
	0x91, 0x91, 0x9a, 0x85, 0xb1, 0x8f, 0x80, 0xe2, 0xa6, 0x05, 0x89, 0x0e, 0x6c, 0xe7, 0x77, 0x7c,
	0xfe, 0xe7, 0x7f, 0x8e, 0x6d, 0xb0, 0xa5, 0x6c, 0xcd, 0xb2, 0x54, 0xa5, 0x6e, 0x49, 0x4a, 0xbf,
	0x01, 0xf5, 0x7e, 0x34, 0x14, 0xfc, 0x32, 0x4e, 0x26, 0x7e, 0x1b, 0xc0, 0x40, 0x4f, 0x45, 0x99,
	0x72, 0x1d, 0xc0, 0xfd, 0x78, 0x4c, 0x90, 0x87, 0x02, 0xcc, 0xf2, 0xd0, 0x75, 0xa1, 0xdc, 0x89,
	0xc7, 0x92, 0x94, 0x3c, 0x1c, 0x60, 0x66, 0x62, 0xff, 0x1e, 0x1a, 0x46, 0x13, 0x8e, 0x54, 0x9c,
	0x26, 0x3b, 0x44, 0x0e, 0xe0, 0xc1, 0x34, 0x25, 0xa5, 0x75, 0x66, 0x30, 0x4d, 0xdd, 0xbf, 0x50,
	0x0d, 0x47, 0xaa, 0xa7, 0x32, 0x82, 0x3d, 0x14, 0xd4, 0x59, 0x41, 0x45, 0x3e, 0xcc, 0x26, 0xa4,
	0x6c, 0x8a, 0x0b, 0x72, 0x09, 0xd4, 0xc2, 0x91, 0xea, 0xc7, 0x82, 0x93, 0x8a, 0x11, 0x6c, 0xd0,
	0x3f, 0x83, 0xe6, 0x7a, 0xe0, 0x5b, 0xce, 0x67, 0xdd, 0x84, 0xff, 0xca, 0xde, 0x01, 0x1c, 0x0a,
	0x61, 0xbc, 0x6d, 0x96, 0x87, 0xfe, 0xff, 0xef, 0x6d, 0x42, 0x21, 0x7e, 0xb6, 0xf1, 0xf7, 0xc1,
	0x31, 0x25, 0xa7, 0x5c, 0x70, 0xc5, 0xcf, 0xaf, 0xc2, 0xe4, 0x6e, 0x47, 0xd5, 0x51, 0x71, 0x9b,
	0x17, 0x51, 0x2c, 0x36, 0xce, 0xe8, 0xcb, 0x99, 0x40, 0xed, 0x24, 0x4d, 0x14, 0x4f, 0x94, 0x99,
	0xa7, 0xce, 0x36, 0xe8, 0x3f, 0xc0, 0x1f, 0x23, 0xec, 0xce, 0xd5, 0x6c, 0xae, 0xe4, 0x8e, 0x3d,
	0xfe, 0x81, 0xdd, 0x89, 0xae, 0x79, 0xf7, 0x86, 0x67, 0x46, 0x6c, 0xb3, 0x2d, 0xbb, 0x7b, 0x50,
	0xc9, 0x1d, 0x25, 0xc1, 0x1e, 0x0e, 0x1a, 0xed, 0x66, 0x4b, 0xca, 0xd6, 0x76, 0x0e, 0xb6, 0x3e,
	0xcb, 0x1b, 0x98, 0xfd, 0x38, 0x97, 0xa4, 0x6c, 0x1e, 0x70, 0xcb, 0xc7, 0x07, 0x8b, 0x25, 0xb5,
	0x5e, 0x97, 0xd4, 0x5a, 0x2d, 0x29, 0x7a, 0xd4, 0x14, 0x3d, 0x6b, 0x8a, 0x5e, 0x34, 0x45, 0x0b,
	0x4d, 0xd1, 0x9b, 0xa6, 0xe8, 0x43, 0x53, 0x6b, 0xa5, 0x29, 0x7a, 0x7a, 0xa7, 0xd6, 0xb0, 0x6a,
	0xbe, 0xcf, 0xe1, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xcb, 0xbd, 0xc5, 0x4a, 0x02, 0x00,
	0x00,
}
